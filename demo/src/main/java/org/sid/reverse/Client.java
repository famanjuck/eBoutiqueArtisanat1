package org.sid.reverse;
// Generated 30 avr. 2019 01:04:31 by Hibernate Tools 3.6.0.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Client generated by hbm2java
 */
@Entity
@Table(name = "client", schema = "public")
public class Client implements java.io.Serializable {

	private int idUtilisateur;
	private Utilisateur utilisateur;
	private String client;
	//private Set<Commande> commandes = new HashSet(0);

	public Client() {
	}

	public Client(Utilisateur utilisateur, String client) {
		this.utilisateur = utilisateur;
		this.client = client;
	}

	public Client(Utilisateur utilisateur, String client, Set<Commande> commandes) {
		this.utilisateur = utilisateur;
		this.client = client;
		//this.commandes = commandes;
	}

	@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "utilisateur"))
	@Id
	@GeneratedValue(generator = "generator")

	@Column(name = "id_utilisateur", unique = true, nullable = false)
	public int getIdUtilisateur() {
		return this.idUtilisateur;
	}

	public void setIdUtilisateur(int idUtilisateur) {
		this.idUtilisateur = idUtilisateur;
	}

	@OneToOne(fetch = FetchType.EAGER)
	@JsonIgnoreProperties("client")
	@PrimaryKeyJoinColumn
	public Utilisateur getUtilisateur() {
		return this.utilisateur;
	}

	public void setUtilisateur(Utilisateur utilisateur) {
		this.utilisateur = utilisateur;
	}

	@Column(name = "client", nullable = false, length = 254)
	public String getClient() {
		return this.client;
	}

	public void setClient(String client) {
		this.client = client;
	}

/*	@OneToMany(fetch = FetchType.EAGER, mappedBy = "client")
	@JsonIgnoreProperties("client")
	public Set<Commande> getCommandes() {
		return this.commandes;
	}*/
/*
	public void setCommandes(Set<Commande> commandes) {
		this.commandes = commandes;
	}*/

}
